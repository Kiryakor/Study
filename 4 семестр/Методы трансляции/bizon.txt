%{ 
	#include <iostream> 
	#include <string>	

	using namespace std;

	void yyerror(char const* msg); 
	int yylex(); 
	int yyparse(); 
%} 

%union{
	struct{
	string* line;
	int precedence;
	}expression_type;
} 
%type <expression_type> S E T F 
%token ident 
%token badsym 
 
S : E { cout << *($1.line) << endl; }; 
E : E'+'T { 
	if ($1 == "" && $3 == ""){ 
		$$.line = new string(*("0"));
	}else if ($1 == "" && $3 != "") {
		$$.line = new string(*($3.line));
	}else if ($1 != "" && $3 == "") {
		$$.line = new string(*($1.line));
	}else{ 
		$$.line = new string(*($1.line));
	}
	$$.line += "+";
	$$.line += $3.line 
}; 
E : T { $$.line = new string(*($1.line)); }; 
T : T'*'F { 
	$$.line = new string(*($1.line)); 
	$$.line += "*"; 
	$$.line += $3.line;
	int cntr = 0; 
	for (int i = 0; i < $$.lien.length(); ++i) { 
		if ($$.line[i] == 'x'){ 
			++cntr; 
		}
	} 
	$$.line += "*";  
	$$.line += cntr + '0'; 
	int pos = -1; 
	for (int i = 0; i < $$.line.length() - 1; ++i) { 
		if ($$.line[i] == 'x' && $$.line[i+1] == '*') { 
			pos = i; 
		} 
	} 
	if (pos != -1) { 
		int i; 
		for (i = pos; i < $$.line.length() - 3; ++i) { 
			$$[i] = $$[i+2]; 
		} 
		$$.line[I+1] = '\0'; 
	$$.line[I+2] = '\0'; 
	} else { 
		for (int i = 0; i < $$.line.length() - 1; ++i) { 
			if ($$.line[I] == '*' && $$.line[I+1] == 'x') { 
				pos = i; 
			} 
		} 
		if (pos != -1) { 
			int i; 
			for (i = pos; i < $$.line.length() - 3; ++i) { 
				$$.line[I] = $$.line[I+2]; 
			} 
			$$.line[I+1] = '\0'; 
			$$.line[I+2] = '\0'; 
		} 
	} 
	if (pos == -1) { 
		$$.line = ""; 
	} 
}; 
T : F { $$.line = new string(*($1.line)); }; 
F : 'x' { $$.line = new string("x"); }; 
F : '5' { $$.line = new string("x"); }; 
F : '6' {$$.line = new string("x"); }; 
F : '('E')' { 
	$$.line = new string("(");
	$$.line += $2.line;  
	$$.line += ")"; 
}; 

%% 
void yyerror(char const* msg) { cerr << msg << endl; }

int yylex() {char c; cin>>c; } 

int main() { 
	printf("Enter words:\n"); 
	while(1) { 
		yyparse(); 
	} 
	return 0; 
}